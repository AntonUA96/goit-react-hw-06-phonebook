{"version":3,"sources":["App.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactsList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","removeContacts","filterChange","INITIAL_STATE","phone","name","ContactForm","state","handleChangeForm","target","value","setState","handleFormSubmit","e","preventDefault","onAdd","props","id","uuidv4","this","onSubmit","type","placeholder","onChange","Component","connect","dispatch","text","contactsAction","ContactListItem","onRemove","onClick","contacts","filter","items","item","toLowerCase","includes","length","map","contact","App","className","styles","container","createReducer","actions","payload","find","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistore","persistStore","ReactDOM","render","StrictMode","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.fa331b0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","//import types from './contacts-types';\nimport { createAction } from '@reduxjs/toolkit';\nconst addContacts = createAction('contacts/add');\n// const addContacts = text => ({\n//     type: types.ADD,\n//     payload: text,\n// })\nconst removeContacts = createAction('contacts/remove');\n// const removeContacts = id => ({\n//     type: types.REMOVE,\n//     payload:id,\n// })\nconst filterChange = createAction('contacts/filterChange');\n// const filterChange = value => ({\n//     type: types.FILTER_CHANGE,\n//     payload:value,\n// })\nexport default { addContacts, removeContacts, filterChange };\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts/contacts-actions';\n\nconst INITIAL_STATE = {\n  phone: '',\n  name: '',\n};\n\nclass ContactForm extends Component {\n  state = INITIAL_STATE;\n\n  handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n\n    const { name, phone } = this.state;\n    const { onAdd } = this.props;\n\n    // const isValidateForm = this.validateForm();\n    // if (!isValidateForm) return;\n    onAdd({ id: uuidv4(), name, phone });\n    this.setState(INITIAL_STATE);\n  };\n\n  // validateForm = () => {\n  //   const { name, phone } = this.state;\n  //   const { onChekUnique } = this.props;\n\n  //   if (!name || !phone) {\n  //     alert('Some file is empty');\n  //     return false;\n  //   }\n  //   return onChekUnique(name);\n  // };\n\n  // resetForm = () => {\n  //   this.setState(INITIAL_STATE);\n  // };\n\n  render() {\n    const { name, phone } = this.state;\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={this.handleChangeForm}\n        />\n        <input\n          type=\"text\"\n          name=\"phone\"\n          placeholder=\"Enter phone number\"\n          value={phone}\n          onChange={this.handleChangeForm}\n        />\n        <button type=\"submit\">Add Contact</button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onAdd: text => dispatch(contactsAction.addContacts(text)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts/contacts-actions';\n\nconst ContactListItem = ({ id, name, phone, onRemove }) => {\n  return (\n    <li>\n      {name}: {phone} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactListItem key={uuidv4()} {...contact} onRemove={onRemove} />\n      ))}\n    </ul>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  phone: PropTypes.string,\n  onRemove: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n  const { filter, items } = state.contacts;\n  const visibleContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n  return {\n    contacts: visibleContacts,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onRemove: id => dispatch(contactsAction.removeContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts/contacts-actions';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={({ target }) => onChange(target.value)}\n      placeholder=\"Enter name for search\"\n    />\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => contactsAction.filterChange(e),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactList/ContactsList';\nimport Filter from './components/Filter/Filter';\nimport styles from './App.module.css';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // handleAddContacts = newContact =>\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [...contacts, newContact],\n  //   }));\n\n  // handleCheckUniqueContact = name => {\n  //   const { contacts } = this.state;\n\n  //   const checkContacts = !!contacts.find(contact => contact.name === name);\n\n  //   checkContacts && alert('This contact is already exist');\n\n  //   return !checkContacts;\n  // };\n\n  // handleRemoveContact = id => {\n  //   this.setState(({ contacts }) => ({\n  //     contacts: contacts.filter(contact => contact.id !== id),\n  //   }));\n  // };\n\n  // handleFilterChange = filter => {\n  //   this.setState({ filter });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parseContacts = JSON.parse(contacts);\n  //   if (parseContacts) {\n  //     this.setState({ contacts: parseContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    // const { filter } = this.state;\n    // const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className={styles.container}>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n      </div>\n    );\n  }\n}\n\nexport default connect()(App);\n","import { combineReducers } from 'redux';\n// import types from './contacts-types';\nimport actions from './contacts-actions';\nimport { createReducer } from '@reduxjs/toolkit';\nconst items = createReducer([], {\n  [actions.addContacts]: (state, { payload }) => {\n    if (state && state.find(contact => contact.name === payload.name)) {\n      alert('Пользователь с таким именем уже существует');\n      return state;\n    }\n    if (!payload.name || !payload.phone) {\n      alert('Данные не введены!');\n      return state;\n    }\n    return [...state, payload];\n  },\n  [actions.removeContacts]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\nconst filter = createReducer('', {\n  [actions.filterChange]: (_, { payload }) => payload,\n});\n// const items = (state = [], { type, payload }) => {\n//     switch (type) {\n//         case types.ADD:\n// if (state && state.find(contact => contact.name === payload.name)) {\n//     alert('Пользователь с таким именем уже существует');\n//     return state;\n// }\n// if (!payload.name || !payload.phone) {\n//     alert('Данные не введены!');\n//     return state;\n// }\n//             return [...state, payload];\n//         case types.REMOVE:\n//             return state.filter(contact => contact.id !== payload);\n//         default:\n//             return state;\n//     }\n// }\n// const filter = (state = '', { type, payload }) => {\n//     switch (type) {\n//         case types.FILTER_CHANGE:\n//             return payload;\n//             default:\n//                 return state;\n//     }\n// }\nexport default combineReducers({ items, filter });\n","// import { createStore, combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import Filter from '../components/Filter';\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n// }\n// const rootReducer = combineReducers({\n//   contacts:contactsReducer,\n// })\n// const store = createStore(rootReducer, composeWithDevTools())\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// })\n// const persistedReducer = persistReducer(persistConfig,rootReducer )\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(persistConfig, contactsReducer),\n// })\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\nconst persistore = persistStore(store);\nexport default { store, persistore };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistore}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}